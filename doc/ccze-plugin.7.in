.\" Hey Emacs! This is -*- mode: nroff; fill-column: 76 -*-!
.TH CCZE\-PLUGIN 1 "2002-11-19" "CCZE @VERSION@" CCZE
.SH NAME
ccze \- A robust log colorizer, plugin infrastructure
.SH SYNOPSIS
.B #include <ccze.h>
.br
.B #include <ccze-color.h>
.br
.B #include <ccze-plugin.h>

.BI "CCZE_DEFINE_PLUGIN (" name ", " quoted\-name ", " type );

.BI "typedef void (*" ccze_plugin_startup_t ") (void);"
.br
.BI "typedef void (*" ccze_plugin_shutdown_t ") (void);"
.br
.BI "typedef int (*" ccze_plugin_handle_t ") (const char *" str ,
.BI "size_t " length ", char **" rest );
.SH DESCRIPTION
This manual page attempts to outline the internals of CCZE plugins:  how
they work, how they are implemented, and how to add new ones.

There are four required entry points in a plugin: a \fIstartup\fR, a
\fIshutdown\fR and a \fIhandler\fR routine (more on these later), and an
informational structure.

The \fIstartup\fR function must be of type \fBccze_plugin_startup_t\fR. This
is called right after the module is loaded.  Its purpose is to initialise
all kinds of module-specific global variables, such as the regular
expressions.

The \fIshutdown\fR function is its counterpart: this is used to deallocate
any memory reserved by the \fIstartup\fR code.

The core part of a plugin is the \fIhandler\fR, of type
\fBccze_plugin_handle_t\fR.  This does the actual coloring.  The string to
process is passed in the \fIstr\fR argument, its length in \fIlength\fR.
The third argument, \fIrest\fR is a pointer to a string.  Unlike the first
two, this argument is used only for output.

When a handler processed a string, it must return a non\-zero value, in case
it could not process it, the handler must return with zero.  If the string
could be processed only partially, the part which was deemed unknown by the
handler must be passed back in the \fIrest\fR variable.

The fourth part, although the smallest part, is the most important. Without
this, the module is useless, it cannot be loaded.  This part tells CCZE what
the \fIstartup\fR, \fIshutdown\fR and \fIhandler\fR functions are called.

To encourage good style, the little details of this structure will not be
disclosed in this manual page.  Instead, the helper macro,
\fICCZE_DEFINE_PLUGIN\fR will be explained.

\fICCZE_DEFINE_PLUGIN\fR is the macro to use if one wants to make the plugin
loadable. Its first argument is an unquoted string: the name of the plugin.
The second one is the same, but quoted this time.  The third part is the
type of the plugin, it can either be \fIFULL\fR or \fIPARTIAL\fR.  It is
assumed that the three functions are called \fIccze_\fBname\fI_setup\fR,
\fIccze_\fBname\fI_shutdown\fR and \fIccze_\fBname\fI_handle\fR,
respectively.

A \fIFULL\fR plugin is one that accepts raw input, untouched by any other
plugin before, and processes it.  On the other hand, a \fIPARTIAL\fR plugin
relies on previous ones preprocessing the input.  For example, \fIsyslog\fR
is a full plugin, on which \fIulogd\fR, a partial plugin relies.  The
\fIsyslog\fR plugin processes the raw input from the logfile, adds colour to
most of it, save the actual message sent by a process, that is left to
subsequent plugins, like \fIulogd\fR.
.SH EXAMPLE
.nf
#include <ccze.h>
#include <ccze-color.h>
#include <ccze-plugin.h>

#include <ncurses.h>
#include <string.h>

static int
ccze_foo_handle (const char *str, size_t length, char **rest)
{
  if (strstr (str, "foo"))
    {
      CCZE_ADDSTR (CCZE_COLOR_GOODWORD, str);
      return 1;
    }
  return 0;
}

static void
ccze_foo_startup (void)
{
}

static void
ccze_foo_shutdown (void)
{
}

CCZE_DEFINE_PLUGIN (foo, "foo", PARTIAL);
.fi
.SH "SEE ALSO"
.BR ccze (1)
.SH AUTHOR
ccze was written by Gergely Nagy <algernon@bonehunter.rulez.org>, based on
colorize by Istvan Karaszi <colorize@spam.raszi.hu>.
